#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EuroSpaceCenter.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="haroen.viaeneeurospacecenter")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertactivation(activation instance);
    partial void Updateactivation(activation instance);
    partial void Deleteactivation(activation instance);
    partial void Insertusers_has_parkplan(users_has_parkplan instance);
    partial void Updateusers_has_parkplan(users_has_parkplan instance);
    partial void Deleteusers_has_parkplan(users_has_parkplan instance);
    partial void Insertattraction(attraction instance);
    partial void Updateattraction(attraction instance);
    partial void Deleteattraction(attraction instance);
    partial void Insertitem(item instance);
    partial void Updateitem(item instance);
    partial void Deleteitem(item instance);
    partial void Insertparkplan(parkplan instance);
    partial void Updateparkplan(parkplan instance);
    partial void Deleteparkplan(parkplan instance);
    partial void Insertparkplans_has_item(parkplans_has_item instance);
    partial void Updateparkplans_has_item(parkplans_has_item instance);
    partial void Deleteparkplans_has_item(parkplans_has_item instance);
    partial void Insertrating(rating instance);
    partial void Updaterating(rating instance);
    partial void Deleterating(rating instance);
    partial void Insertrestaurant(restaurant instance);
    partial void Updaterestaurant(restaurant instance);
    partial void Deleterestaurant(restaurant instance);
    partial void Insertshow(show instance);
    partial void Updateshow(show instance);
    partial void Deleteshow(show instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["haroen_viaeneeurospacecenterConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<activation> activations
		{
			get
			{
				return this.GetTable<activation>();
			}
		}
		
		public System.Data.Linq.Table<users_has_parkplan> users_has_parkplans
		{
			get
			{
				return this.GetTable<users_has_parkplan>();
			}
		}
		
		public System.Data.Linq.Table<attraction> attractions
		{
			get
			{
				return this.GetTable<attraction>();
			}
		}
		
		public System.Data.Linq.Table<item> items
		{
			get
			{
				return this.GetTable<item>();
			}
		}
		
		public System.Data.Linq.Table<parkplan> parkplans
		{
			get
			{
				return this.GetTable<parkplan>();
			}
		}
		
		public System.Data.Linq.Table<parkplans_has_item> parkplans_has_items
		{
			get
			{
				return this.GetTable<parkplans_has_item>();
			}
		}
		
		public System.Data.Linq.Table<rating> ratings
		{
			get
			{
				return this.GetTable<rating>();
			}
		}
		
		public System.Data.Linq.Table<restaurant> restaurants
		{
			get
			{
				return this.GetTable<restaurant>();
			}
		}
		
		public System.Data.Linq.Table<show> shows
		{
			get
			{
				return this.GetTable<show>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].activations")]
	public partial class activation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _code;
		
		private System.Nullable<int> _users_id;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void Onusers_idChanging(System.Nullable<int> value);
    partial void Onusers_idChanged();
    #endregion
		
		public activation()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="NVarChar(50)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_users_id", DbType="Int")]
		public System.Nullable<int> users_id
		{
			get
			{
				return this._users_id;
			}
			set
			{
				if ((this._users_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onusers_idChanging(value);
					this.SendPropertyChanging();
					this._users_id = value;
					this.SendPropertyChanged("users_id");
					this.Onusers_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_activation", Storage="_user", ThisKey="users_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.activations.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.activations.Add(this);
						this._users_id = value.id;
					}
					else
					{
						this._users_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].users_has_parkplans")]
	public partial class users_has_parkplan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private bool _accepted;
		
		private int _users_id;
		
		private int _parkplans_id;
		
		private EntityRef<parkplan> _parkplan;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnacceptedChanging(bool value);
    partial void OnacceptedChanged();
    partial void Onusers_idChanging(int value);
    partial void Onusers_idChanged();
    partial void Onparkplans_idChanging(int value);
    partial void Onparkplans_idChanged();
    #endregion
		
		public users_has_parkplan()
		{
			this._parkplan = default(EntityRef<parkplan>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accepted", DbType="Bit NOT NULL")]
		public bool accepted
		{
			get
			{
				return this._accepted;
			}
			set
			{
				if ((this._accepted != value))
				{
					this.OnacceptedChanging(value);
					this.SendPropertyChanging();
					this._accepted = value;
					this.SendPropertyChanged("accepted");
					this.OnacceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_users_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int users_id
		{
			get
			{
				return this._users_id;
			}
			set
			{
				if ((this._users_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onusers_idChanging(value);
					this.SendPropertyChanging();
					this._users_id = value;
					this.SendPropertyChanged("users_id");
					this.Onusers_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parkplans_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int parkplans_id
		{
			get
			{
				return this._parkplans_id;
			}
			set
			{
				if ((this._parkplans_id != value))
				{
					if (this._parkplan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparkplans_idChanging(value);
					this.SendPropertyChanging();
					this._parkplans_id = value;
					this.SendPropertyChanged("parkplans_id");
					this.Onparkplans_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parkplan_users_has_parkplan", Storage="_parkplan", ThisKey="parkplans_id", OtherKey="id", IsForeignKey=true)]
		public parkplan parkplan
		{
			get
			{
				return this._parkplan.Entity;
			}
			set
			{
				parkplan previousValue = this._parkplan.Entity;
				if (((previousValue != value) 
							|| (this._parkplan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._parkplan.Entity = null;
						previousValue.users_has_parkplans.Remove(this);
					}
					this._parkplan.Entity = value;
					if ((value != null))
					{
						value.users_has_parkplans.Add(this);
						this._parkplans_id = value.id;
					}
					else
					{
						this._parkplans_id = default(int);
					}
					this.SendPropertyChanged("parkplan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_has_parkplan", Storage="_user", ThisKey="users_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.users_has_parkplans.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.users_has_parkplans.Add(this);
						this._users_id = value.id;
					}
					else
					{
						this._users_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].attractions")]
	public partial class attraction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _item_id;
		
		private System.Nullable<int> _min_height;
		
		private System.Nullable<int> _max_height;
		
		private EntityRef<item> _item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onitem_idChanging(int value);
    partial void Onitem_idChanged();
    partial void Onmin_heightChanging(System.Nullable<int> value);
    partial void Onmin_heightChanged();
    partial void Onmax_heightChanging(System.Nullable<int> value);
    partial void Onmax_heightChanged();
    #endregion
		
		public attraction()
		{
			this._item = default(EntityRef<item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int item_id
		{
			get
			{
				return this._item_id;
			}
			set
			{
				if ((this._item_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitem_idChanging(value);
					this.SendPropertyChanging();
					this._item_id = value;
					this.SendPropertyChanged("item_id");
					this.Onitem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min_height", DbType="Int")]
		public System.Nullable<int> min_height
		{
			get
			{
				return this._min_height;
			}
			set
			{
				if ((this._min_height != value))
				{
					this.Onmin_heightChanging(value);
					this.SendPropertyChanging();
					this._min_height = value;
					this.SendPropertyChanged("min_height");
					this.Onmin_heightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max_height", DbType="Int")]
		public System.Nullable<int> max_height
		{
			get
			{
				return this._max_height;
			}
			set
			{
				if ((this._max_height != value))
				{
					this.Onmax_heightChanging(value);
					this.SendPropertyChanging();
					this._max_height = value;
					this.SendPropertyChanged("max_height");
					this.Onmax_heightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_attraction", Storage="_item", ThisKey="item_id", OtherKey="id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.attraction = null;
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.attraction = this;
						this._item_id = value.id;
					}
					else
					{
						this._item_id = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].items")]
	public partial class item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _title;
		
		private string _description;
		
		private string _image;
		
		private string _alt;
		
		private EntityRef<attraction> _attraction;
		
		private EntitySet<parkplans_has_item> _parkplans_has_items;
		
		private EntitySet<rating> _ratings;
		
		private EntityRef<restaurant> _restaurant;
		
		private EntityRef<show> _show;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnaltChanging(string value);
    partial void OnaltChanged();
    #endregion
		
		public item()
		{
			this._attraction = default(EntityRef<attraction>);
			this._parkplans_has_items = new EntitySet<parkplans_has_item>(new Action<parkplans_has_item>(this.attach_parkplans_has_items), new Action<parkplans_has_item>(this.detach_parkplans_has_items));
			this._ratings = new EntitySet<rating>(new Action<rating>(this.attach_ratings), new Action<rating>(this.detach_ratings));
			this._restaurant = default(EntityRef<restaurant>);
			this._show = default(EntityRef<show>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="NVarChar(MAX)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alt", DbType="NVarChar(MAX)")]
		public string alt
		{
			get
			{
				return this._alt;
			}
			set
			{
				if ((this._alt != value))
				{
					this.OnaltChanging(value);
					this.SendPropertyChanging();
					this._alt = value;
					this.SendPropertyChanged("alt");
					this.OnaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_attraction", Storage="_attraction", ThisKey="id", OtherKey="item_id", IsUnique=true, IsForeignKey=false)]
		public attraction attraction
		{
			get
			{
				return this._attraction.Entity;
			}
			set
			{
				attraction previousValue = this._attraction.Entity;
				if (((previousValue != value) 
							|| (this._attraction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._attraction.Entity = null;
						previousValue.item = null;
					}
					this._attraction.Entity = value;
					if ((value != null))
					{
						value.item = this;
					}
					this.SendPropertyChanged("attraction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_parkplans_has_item", Storage="_parkplans_has_items", ThisKey="id", OtherKey="items_id")]
		public EntitySet<parkplans_has_item> parkplans_has_items
		{
			get
			{
				return this._parkplans_has_items;
			}
			set
			{
				this._parkplans_has_items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_rating", Storage="_ratings", ThisKey="id", OtherKey="items_id")]
		public EntitySet<rating> ratings
		{
			get
			{
				return this._ratings;
			}
			set
			{
				this._ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_restaurant", Storage="_restaurant", ThisKey="id", OtherKey="items_id", IsUnique=true, IsForeignKey=false)]
		public restaurant restaurant
		{
			get
			{
				return this._restaurant.Entity;
			}
			set
			{
				restaurant previousValue = this._restaurant.Entity;
				if (((previousValue != value) 
							|| (this._restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._restaurant.Entity = null;
						previousValue.item = null;
					}
					this._restaurant.Entity = value;
					if ((value != null))
					{
						value.item = this;
					}
					this.SendPropertyChanged("restaurant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_show", Storage="_show", ThisKey="id", OtherKey="items_id", IsUnique=true, IsForeignKey=false)]
		public show show
		{
			get
			{
				return this._show.Entity;
			}
			set
			{
				show previousValue = this._show.Entity;
				if (((previousValue != value) 
							|| (this._show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._show.Entity = null;
						previousValue.item = null;
					}
					this._show.Entity = value;
					if ((value != null))
					{
						value.item = this;
					}
					this.SendPropertyChanged("show");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_parkplans_has_items(parkplans_has_item entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_parkplans_has_items(parkplans_has_item entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
		
		private void attach_ratings(rating entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_ratings(rating entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].parkplans")]
	public partial class parkplan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _description;
		
		private EntitySet<users_has_parkplan> _users_has_parkplans;
		
		private EntitySet<parkplans_has_item> _parkplans_has_items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public parkplan()
		{
			this._users_has_parkplans = new EntitySet<users_has_parkplan>(new Action<users_has_parkplan>(this.attach_users_has_parkplans), new Action<users_has_parkplan>(this.detach_users_has_parkplans));
			this._parkplans_has_items = new EntitySet<parkplans_has_item>(new Action<parkplans_has_item>(this.attach_parkplans_has_items), new Action<parkplans_has_item>(this.detach_parkplans_has_items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parkplan_users_has_parkplan", Storage="_users_has_parkplans", ThisKey="id", OtherKey="parkplans_id")]
		public EntitySet<users_has_parkplan> users_has_parkplans
		{
			get
			{
				return this._users_has_parkplans;
			}
			set
			{
				this._users_has_parkplans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parkplan_parkplans_has_item", Storage="_parkplans_has_items", ThisKey="id", OtherKey="parkplans_id")]
		public EntitySet<parkplans_has_item> parkplans_has_items
		{
			get
			{
				return this._parkplans_has_items;
			}
			set
			{
				this._parkplans_has_items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users_has_parkplans(users_has_parkplan entity)
		{
			this.SendPropertyChanging();
			entity.parkplan = this;
		}
		
		private void detach_users_has_parkplans(users_has_parkplan entity)
		{
			this.SendPropertyChanging();
			entity.parkplan = null;
		}
		
		private void attach_parkplans_has_items(parkplans_has_item entity)
		{
			this.SendPropertyChanging();
			entity.parkplan = this;
		}
		
		private void detach_parkplans_has_items(parkplans_has_item entity)
		{
			this.SendPropertyChanging();
			entity.parkplan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].parkplans_has_items")]
	public partial class parkplans_has_item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _parkplans_id;
		
		private int _items_id;
		
		private EntityRef<item> _item;
		
		private EntityRef<parkplan> _parkplan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onparkplans_idChanging(int value);
    partial void Onparkplans_idChanged();
    partial void Onitems_idChanging(int value);
    partial void Onitems_idChanged();
    #endregion
		
		public parkplans_has_item()
		{
			this._item = default(EntityRef<item>);
			this._parkplan = default(EntityRef<parkplan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parkplans_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int parkplans_id
		{
			get
			{
				return this._parkplans_id;
			}
			set
			{
				if ((this._parkplans_id != value))
				{
					if (this._parkplan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparkplans_idChanging(value);
					this.SendPropertyChanging();
					this._parkplans_id = value;
					this.SendPropertyChanged("parkplans_id");
					this.Onparkplans_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_items_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int items_id
		{
			get
			{
				return this._items_id;
			}
			set
			{
				if ((this._items_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitems_idChanging(value);
					this.SendPropertyChanging();
					this._items_id = value;
					this.SendPropertyChanged("items_id");
					this.Onitems_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_parkplans_has_item", Storage="_item", ThisKey="items_id", OtherKey="id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.parkplans_has_items.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.parkplans_has_items.Add(this);
						this._items_id = value.id;
					}
					else
					{
						this._items_id = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parkplan_parkplans_has_item", Storage="_parkplan", ThisKey="parkplans_id", OtherKey="id", IsForeignKey=true)]
		public parkplan parkplan
		{
			get
			{
				return this._parkplan.Entity;
			}
			set
			{
				parkplan previousValue = this._parkplan.Entity;
				if (((previousValue != value) 
							|| (this._parkplan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._parkplan.Entity = null;
						previousValue.parkplans_has_items.Remove(this);
					}
					this._parkplan.Entity = value;
					if ((value != null))
					{
						value.parkplans_has_items.Add(this);
						this._parkplans_id = value.id;
					}
					else
					{
						this._parkplans_id = default(int);
					}
					this.SendPropertyChanged("parkplan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].ratings")]
	public partial class rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _users_id;
		
		private int _items_id;
		
		private System.DateTime _datetime;
		
		private short _rating1;
		
		private string _message;
		
		private EntityRef<item> _item;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onusers_idChanging(int value);
    partial void Onusers_idChanged();
    partial void Onitems_idChanging(int value);
    partial void Onitems_idChanged();
    partial void OndatetimeChanging(System.DateTime value);
    partial void OndatetimeChanged();
    partial void Onrating1Changing(short value);
    partial void Onrating1Changed();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    #endregion
		
		public rating()
		{
			this._item = default(EntityRef<item>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_users_id", DbType="Int NOT NULL")]
		public int users_id
		{
			get
			{
				return this._users_id;
			}
			set
			{
				if ((this._users_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onusers_idChanging(value);
					this.SendPropertyChanging();
					this._users_id = value;
					this.SendPropertyChanged("users_id");
					this.Onusers_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_items_id", DbType="Int NOT NULL")]
		public int items_id
		{
			get
			{
				return this._items_id;
			}
			set
			{
				if ((this._items_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitems_idChanging(value);
					this.SendPropertyChanging();
					this._items_id = value;
					this.SendPropertyChanged("items_id");
					this.Onitems_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime NOT NULL")]
		public System.DateTime datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="rating", Storage="_rating1", DbType="SmallInt NOT NULL")]
		public short rating1
		{
			get
			{
				return this._rating1;
			}
			set
			{
				if ((this._rating1 != value))
				{
					this.Onrating1Changing(value);
					this.SendPropertyChanging();
					this._rating1 = value;
					this.SendPropertyChanged("rating1");
					this.Onrating1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="NVarChar(MAX)")]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_rating", Storage="_item", ThisKey="items_id", OtherKey="id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.ratings.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.ratings.Add(this);
						this._items_id = value.id;
					}
					else
					{
						this._items_id = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_rating", Storage="_user", ThisKey="users_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.ratings.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.ratings.Add(this);
						this._users_id = value.id;
					}
					else
					{
						this._users_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
    }
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].restaurants")]
	public partial class restaurant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _items_id;
		
		private string _payment_type;
		
		private EntityRef<item> _item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onitems_idChanging(int value);
    partial void Onitems_idChanged();
    partial void Onpayment_typeChanging(string value);
    partial void Onpayment_typeChanged();
    #endregion
		
		public restaurant()
		{
			this._item = default(EntityRef<item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_items_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int items_id
		{
			get
			{
				return this._items_id;
			}
			set
			{
				if ((this._items_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitems_idChanging(value);
					this.SendPropertyChanging();
					this._items_id = value;
					this.SendPropertyChanged("items_id");
					this.Onitems_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payment_type", DbType="NVarChar(255)")]
		public string payment_type
		{
			get
			{
				return this._payment_type;
			}
			set
			{
				if ((this._payment_type != value))
				{
					this.Onpayment_typeChanging(value);
					this.SendPropertyChanging();
					this._payment_type = value;
					this.SendPropertyChanged("payment_type");
					this.Onpayment_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_restaurant", Storage="_item", ThisKey="items_id", OtherKey="id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.restaurant = null;
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.restaurant = this;
						this._items_id = value.id;
					}
					else
					{
						this._items_id = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].shows")]
	public partial class show : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _items_id;
		
		private System.Nullable<System.DateTime> _datetime;
		
		private EntityRef<item> _item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onitems_idChanging(int value);
    partial void Onitems_idChanged();
    partial void OndatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OndatetimeChanged();
    #endregion
		
		public show()
		{
			this._item = default(EntityRef<item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_items_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int items_id
		{
			get
			{
				return this._items_id;
			}
			set
			{
				if ((this._items_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitems_idChanging(value);
					this.SendPropertyChanging();
					this._items_id = value;
					this.SendPropertyChanged("items_id");
					this.Onitems_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_show", Storage="_item", ThisKey="items_id", OtherKey="id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.show = null;
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.show = this;
						this._items_id = value.id;
					}
					else
					{
						this._items_id = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[haroen.viaeneharoen.viaene].users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private bool _admin;
		
		private bool _verified;
		
		private EntitySet<activation> _activations;
		
		private EntitySet<users_has_parkplan> _users_has_parkplans;
		
		private EntitySet<rating> _ratings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnadminChanging(bool value);
    partial void OnadminChanged();
    partial void OnverifiedChanging(bool value);
    partial void OnverifiedChanged();
    #endregion
		
		public user()
		{
			this._activations = new EntitySet<activation>(new Action<activation>(this.attach_activations), new Action<activation>(this.detach_activations));
			this._users_has_parkplans = new EntitySet<users_has_parkplan>(new Action<users_has_parkplan>(this.attach_users_has_parkplans), new Action<users_has_parkplan>(this.detach_users_has_parkplans));
			this._ratings = new EntitySet<rating>(new Action<rating>(this.attach_ratings), new Action<rating>(this.detach_ratings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_admin", DbType="Bit NOT NULL")]
		public bool admin
		{
			get
			{
				return this._admin;
			}
			set
			{
				if ((this._admin != value))
				{
					this.OnadminChanging(value);
					this.SendPropertyChanging();
					this._admin = value;
					this.SendPropertyChanged("admin");
					this.OnadminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_verified", DbType="Bit NOT NULL")]
		public bool verified
		{
			get
			{
				return this._verified;
			}
			set
			{
				if ((this._verified != value))
				{
					this.OnverifiedChanging(value);
					this.SendPropertyChanging();
					this._verified = value;
					this.SendPropertyChanged("verified");
					this.OnverifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_activation", Storage="_activations", ThisKey="id", OtherKey="users_id")]
		public EntitySet<activation> activations
		{
			get
			{
				return this._activations;
			}
			set
			{
				this._activations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_has_parkplan", Storage="_users_has_parkplans", ThisKey="id", OtherKey="users_id")]
		public EntitySet<users_has_parkplan> users_has_parkplans
		{
			get
			{
				return this._users_has_parkplans;
			}
			set
			{
				this._users_has_parkplans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_rating", Storage="_ratings", ThisKey="id", OtherKey="users_id")]
		public EntitySet<rating> ratings
		{
			get
			{
				return this._ratings;
			}
			set
			{
				this._ratings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_activations(activation entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_activations(activation entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_users_has_parkplans(users_has_parkplan entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_users_has_parkplans(users_has_parkplan entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_ratings(rating entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_ratings(rating entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
}
#pragma warning restore 1591
